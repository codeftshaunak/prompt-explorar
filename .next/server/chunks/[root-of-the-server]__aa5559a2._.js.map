{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 73, "column": 0}, "map": {"version":3,"sources":["file:///Users/hypomatrix/Downloads/system-prompts-and-models-of-ai-tools-main/prompt-explorer/src/app/api/prompts/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server'\nimport fs from 'fs'\nimport path from 'path'\nimport matter from 'gray-matter'\n\nexport interface PromptFile {\n  id: string\n  title: string\n  category: string\n  content: string\n  description?: string\n  tags: string[]\n  filePath: string\n  wordCount: number\n  lastModified: string\n}\n\nconst PROMPTS_DIR = path.join(process.cwd(), 'data', 'prompts')\n\nfunction getAllPrompts(): PromptFile[] {\n  const prompts: PromptFile[] = []\n\n  function scanDirectory(dir: string, category: string = '') {\n    try {\n      const items = fs.readdirSync(dir)\n\n      for (const item of items) {\n        const fullPath = path.join(dir, item)\n        const stat = fs.statSync(fullPath)\n\n        if (stat.isDirectory() && !item.startsWith('.') && item !== 'node_modules' && item !== 'prompt-explorer') {\n          const categoryName = category ? `${category}/${item}` : item\n          scanDirectory(fullPath, categoryName)\n        } else if (item.endsWith('.txt') || item.endsWith('.md')) {\n          try {\n            const content = fs.readFileSync(fullPath, 'utf-8')\n            const { data, content: markdownContent } = matter(content)\n\n            const finalCategory = category || path.basename(path.dirname(fullPath))\n            const title = data.title || path.basename(item, path.extname(item))\n\n            prompts.push({\n              id: `${finalCategory}-${path.basename(item, path.extname(item))}`.toLowerCase().replace(/[^a-z0-9-]/g, '-'),\n              title: title.replace(/[-_]/g, ' ').replace(/\\b\\w/g, (l: string) => l.toUpperCase()),\n              category: finalCategory,\n              content: markdownContent || content,\n              description: data.description,\n              tags: data.tags || [],\n              filePath: fullPath,\n              wordCount: (markdownContent || content).split(/\\s+/).length,\n              lastModified: stat.mtime.toISOString()\n            })\n          } catch (error) {\n            console.warn(`Error reading file ${fullPath}:`, error)\n          }\n        }\n      }\n    } catch (error) {\n      console.warn(`Error scanning directory ${dir}:`, error)\n    }\n  }\n\n  scanDirectory(PROMPTS_DIR)\n  return prompts.sort((a, b) => a.title.localeCompare(b.title))\n}\n\nexport async function GET(request: Request) {\n  try {\n    const { searchParams } = new URL(request.url)\n    const query = searchParams.get('search')\n    const category = searchParams.get('category')\n\n    let prompts = getAllPrompts()\n\n    // Filter by category\n    if (category) {\n      prompts = prompts.filter(prompt => prompt.category === category)\n    }\n\n    // Filter by search query\n    if (query) {\n      const lowercaseQuery = query.toLowerCase()\n      prompts = prompts.filter(prompt =>\n        prompt.title.toLowerCase().includes(lowercaseQuery) ||\n        prompt.category.toLowerCase().includes(lowercaseQuery) ||\n        prompt.content.toLowerCase().includes(lowercaseQuery) ||\n        prompt.tags.some(tag => tag.toLowerCase().includes(lowercaseQuery))\n      )\n    }\n\n    return NextResponse.json(prompts)\n  } catch (error) {\n    console.error('Error fetching prompts:', error)\n    return NextResponse.json({ error: 'Failed to fetch prompts' }, { status: 500 })\n  }\n}"],"names":[],"mappings":"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","debugId":null}}]
}